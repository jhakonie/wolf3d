#include "fcntl.h"
#include "stdlib.h"
#include "stdio.h"
#include "unistd.h"

#include "../src/wc_draw.h"


void	aabb_print(t_aabb const *aabb, char const *n)
{
	printf("%s: min: [%f, %f, %f], max: [%f, %f, %f]\n", n,
		aabb->min.x, aabb->min.y, aabb->min.z,
		aabb->max.x, aabb->max.y, aabb->max.z);
}


void	n3_print(t_n3 n, char const *n_)
{
	printf("%s: [%f, %f, %f]", n_, n.x, n.y, n.z);
}


void	p2_print(t_p2 p, char const *n)
{
	printf("%s: [%f, %f]", n, p.x, p.y);
}


void	p3_print(t_p3 p, char const *n)
{
	printf("%s: [%f, %f, %f]", n, p.x, p.y, p.z);
}


int main(void)
{
	char const	*filename = "data/unit_cube.obj";
	t_mesh		m;

	if (!wc_mesh_new_from_file(&m, filename))
	{
		printf("%s@%d: %s\n", __PRETTY_FUNCTION__, __LINE__, "!wc_mesh_new()");
		return (-1);
	}
	printf("filename: %s\n", filename);
	printf("m.indices.size: %lu\n", m.indices.size);
	printf("m.vertices.size: %lu\n", m.vertices.size);
	aabb_print(&m.aabb, "aabb");
	t_u64	i;
	i = 0;
	while (i < m.indices.size)
	{
		printf("---\n");
		printf("face: %lu\n", i / 3);
		p3_print(m.vertices.buffer[m.indices.buffer[i + 0]].position, "p");
		printf(", ");
		n3_print(m.vertices.buffer[m.indices.buffer[i + 0]].normal, "n");
		printf(", ");
		p2_print(m.vertices.buffer[m.indices.buffer[i + 0]].uv, "uv");
		printf("\n");
		p3_print(m.vertices.buffer[m.indices.buffer[i + 1]].position, "p");
		printf(", ");
		n3_print(m.vertices.buffer[m.indices.buffer[i + 1]].normal, "n");
		printf(", ");
		p2_print(m.vertices.buffer[m.indices.buffer[i + 1]].uv, "uv");
		printf("\n");
		p3_print(m.vertices.buffer[m.indices.buffer[i + 2]].position, "p");
		printf(", ");
		n3_print(m.vertices.buffer[m.indices.buffer[i + 2]].normal, "n");
		printf(", ");
		p2_print(m.vertices.buffer[m.indices.buffer[i + 2]].uv, "uv");
		printf("\n");
		i += 3;
	}
	wc_mesh_del(&m);
	return (0);
}
