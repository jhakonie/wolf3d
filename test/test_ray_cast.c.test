#include "math.h"
#include "stdio.h"

#include "../src/we_draw.h"
// #include "../src/we_editor.h"
// #include "../src/wx_math.h"

void	p2_print(t_p2 pp, char *first, char *second)
{
	printf("%s %f\n", first, pp.x);
	printf("%s %f\n", second, pp.y);
}

void chart_print(char *chart, int size)
{
	int i;

	i = 0;
	printf("\nchart:\n");
	while (i < size)
	{
		if (i > 2 && i % 3 == 0)
			printf("\n");
		printf("%c", chart[i]);
		i++;
	}
	printf("\n");
}

t_ray	zz_ray_create(t_u32 screen_width, t_f32 ray_nb)
{
	t_ray	ray;
	t_f32	camera_x;
	t_p2	screen;
	t_p2	start_direction;

	screen.x = 0.0f;
	screen.y = 0.66f;
	start_direction.x = -1;
	start_direction.y = 0;
	camera_x = 2 * ray_nb / screen_width - 1;
	ray.delta.x = start_direction.x + screen.x * camera_x;
	ray.delta.y = start_direction.y + screen.y * camera_x;
	return (ray);
}

void	ray_rotate(t_p2 *p, t_f32 dir_d)
{
	t_f32 x;
	t_f32 y;

	x = p->x;
	y = p->y;
	p->x = x * cos(wx_to_radians(dir_d)) - y * sin(wx_to_radians(dir_d));
	p->y = x * sin(wx_to_radians(dir_d)) + y * cos(wx_to_radians(dir_d));
}

void	ray_init(t_ray_cast *r, t_ray ray, t_p2  player_pos)
{
	r->map.x = (int)player_pos.x;
	r->map.y = (int)player_pos.y;
	r->wall = WE_NO_WALL;
	r->delta.x = (1 + (ray.delta.y * ray.delta.y) / (ray.delta.x * ray.delta.x));//fabsf(1 / ray.delta.x);
	//(1 + (ray.delta.y * ray.delta.y) / (ray.delta.x * ray.delta.x));
	r->delta.y = sqrt(1 + (ray.delta.x * ray.delta.x) / (ray.delta.y * ray.delta.y));//fabsf(1 / ray.delta.y);
	//sqrt(1 + (ray.delta.x * ray.delta.x) / (ray.delta.y * ray.delta.y));
	if (ray.delta.x < 0)
	{
		r->step.x = -1;
		r->side.x = (player_pos.x - r->map.x) * r->delta.x;
	}
	else
	{
		r->step.x = 1;
		r->side.x = (r->map.x + 1 - player_pos.x) * r->delta.x;
	}
	if (ray.delta.y < 0)
	{
		r->step.y = -1;
		r->side.y = (player_pos.y - r->map.y) * r->delta.y;
	}
	else
	{
		r->step.y = 1;
		r->side.y = (r->map.y + 1 - player_pos.y) * r->delta.y;
	}
}

t_ray_cast	ray_cast(t_ray ray, char *chart, t_p2 player_pos)
{
	t_ray_cast	r;
	t_bool		is_wall;

	is_wall = wx_false;
	ray_init(&r, ray, player_pos);
	while (!is_wall && r.wall_dist < 7)
	{
		if (r.side.x < r.side.y)
		{
			r.side.x += r.delta.x;
			r.map.x += r.step.x;
			r.wall_dist += r.side.x;
			r.wall = WE_VERTICAL;
		}
		else
		{
			r.side.y += r.delta.y;
			r.map.y += r.step.y;
			r.wall_dist += r.side.y;
			r.wall = WE_HORIZONTAL;
		}
		int index = r.map.x + r.map.y * 3;
		printf("index: %d\n", index);
		if (index >= 0 && index < 9)
		{
			if (chart[r.map.x + r.map.y * 3] != '.')
				break ;
		}
		r.wall = WE_NO_WALL;
	}
	return (r);
}

void	ray_cast_print(t_ray_cast r)
{
	t_p2 map;

	map.x = r.map.x;
	map.y = r.map.y;
	printf("\nraycast:\n");
	if (r.wall == WE_HORIZONTAL)
		printf("wall is horisontal\n");
	else if (r.wall == WE_VERTICAL)
		printf("wall is vertical\n");
	else
		printf("NO WALL\n");
	p2_print(map, "map x\n", "map y\n");
}

int main(void)
{
	printf("\n---\n");
	{
		t_f32	player_dir_d = 91;
		t_p2	player_pos = {1, 1};
		char	chart[9] = {'.', '0', '.', '0', '.', '0', '.', '0', '.'};
		// t_f32	distance;
		t_ray_cast	r;

		printf("player dir: %f\n", player_dir_d);
		p2_print(player_pos, "player pos x", "player pos y");
		chart_print(chart, 9);
		t_ray ray = zz_ray_create(10, 5);
		p2_print(ray.delta, "ray.x", "ray.y");
		ray_rotate(&ray.delta, player_dir_d);
		p2_print(ray.delta, "after rotate ray.x", "after rotate ray.y");
		ray.delta.y *= -1;
		p2_print(ray.delta, "after y * -1 ray.x", "after y * -1 ray.y");
		r = ray_cast(ray, chart, player_pos);
		// if (r.wall != WE_NO_WALL)
		// 	distance = calculate_distance(r);
		ray_cast_print(r);
	}
	return (0);
}
